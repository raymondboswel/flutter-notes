#+TITLE: Flutter notes
#+AUTHOR: Raymond Boswel
#+BABEL: :cache yes
#+LATEX_HEADER: \usepackage{parskip}
#+LATEX_HEADER: \usepackage{inconsolata}
#+LATEX_HEADER: \usepackage[utf8]{inputenc}

* Layouts
Everything is a widget, including layout widgets, rows, columns etc.

- Container widgets allow you to customize the container's child, to add margins,
padding, et al.

- The visual layout of widgets can be viewed by setting 
debugPaintSizeEnabled

- More in depth debugging can be done with the flutter inspector

- Arranging items vertically and horizontally can be accomplished using Row and
Column widgets

** Aligning widgets
Column and row widgets have mainAxisAlignment and crossAxisAlignment properties
to allow configuration of alignment properties. These properties correspond
roughly to the flexbox alignment properties.

** Sizing Widgets
Widgets can be resized to fit within a row/column by using the Expanded widget.
To make a widget occupy more space than its siblings you can set the flex
property.

** Packing Widgets
By default a row or column occupies as much as possible space along its main
axis. This can be changed by setting mainAxisSize to MainAxisSize.min

** Nesting
Row and column widgets can be nested as deeply as required to implement the
design.

Tip: To minimize the visual confusion that can result from heavily nested
layout code, implement pieces of the UI in variables and functions.

** Common layout widgets
A full list of widgets can be found in the flutter widget catalog. 

*** Standard widgets
**** Container 
- Adds padding margin, borders, background color or other decorations
- Contains a single child widget, which can be an entire widget tree  
**** Gridview
- Lays widgets out in a scrollable grid (two-dimensional list)
- GridView.count: specify the number of columns
- GridView.count: specify the maximum px width of a column
- Use Table or DataTable if it is important where a cell is placed

**** ListView
- Lays widgets out in a scrollable list
- A specialized Column for organizing a list of boxes
- Can be laid out horizontally or vertically
- Detects when its content won’t fit and provides scrolling
- Less configurable than Column, but easier to use and supports scrolling

**** Stack 
- Overlaps a widget on top of another
- The first widget in the list of children is the base widget; subsequent
children are overlaid on top of that base widget
- A Stack’s content can’t scroll
- You can choose to clip children that exceed the render box


*** Material widgets:
- Card
  Organizes related info into a box with rounded corners and a drop shadow
- ListTile
  Organizes up to 3 lines of text, and optional leading and trailing icons, into a row.


** Responsive layouts
Two basic approaches in flutter.

*** Use the LayoutBuilder class
From its builder property, you get a BoxConstraints object. Examine the 
constraint’s properties to decide what to display. For example, if your
maxWidth is greater than your width breakpoint, return a Scaffold object 
with a row that has a list on the left. If it’s narrower, return a Scaffold 
object with a drawer containing that list. You can also adjust your display 
based on the device’s height, the aspect ratio, or some other property. 
When the constraints change (for example, the user rotates the phone, or puts
 your app into a tile UI in Nougat), the build function runs.
*** Use the MediaQuery.of() method in your build functions
This gives you the size, orientation, etc, of your current app. This is more 
useful if you want to make decisions based on the complete context rather than
 on just the size of your particular widget. Again, if you use this, then your
 build function automatically runs if the user somehow changes the app’s size.

Other useful widgets and classes for creating a responsive UI:

- AspectRatio
- CustomSingleChildLayout
- CustomMultiChildLayout
- FittedBox
- FractionallySizedBox
- LayoutBuilder
- MediaQuery
- MediaQueryData
- OrientationBuilder

Also see:
[[https://medium.com/flutter-community/developing-for-multiple-screen-sizes-and-orientations-in-flutter-fragments-in-flutter-a4c51b849434][Developing for Multiple Screen Sizes and Orientations in Flutter]]
[[https://medium.com/flutter-community/build-responsive-uis-in-flutter-fd450bd59158][Build Responsive UIs in Flutter]]
[[https://medium.com/flutter-community/making-cross-platform-flutter-landing-page-responsive-7fffe0655970][Making Cross-platform Flutter Landing Page Responsive]]
[[https://stackoverflow.com/questions/49704497/how-to-make-flutter-app-responsive-according-to-different-screen-size][How to make flutter app responsive according to different screen size?]]

* Stateful vs Stateless Widgets
- A stateful widget is implemented by two classes: a subclass of StatefulWidget
and a subclass of State.
- A stateful widget is implemented by two classes: a subclass of StatefulWidget
and a subclass of State.
- When the widget’s state changes, the state object calls setState(), telling
the framework to redraw the widget.
- If in doubt, start by managing state in the parent widget.

- A stateless widget is implemented by subclassing StatelessWidget




* Images 
Images that are local (Image.asset) must be added to the pubspec.yaml file.
This is not necessary for Online images (Image.network)
